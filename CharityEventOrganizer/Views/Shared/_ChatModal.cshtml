@{
    var randomId = "sponsorMessagesModal_" + DateTime.Now.Ticks;
}

<!-- Sponsor Messages Modal -->
<div class="modal fade" id="@randomId" tabindex="-1" role="dialog" aria-labelledby="sponsorMessagesModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="sponsorMessagesModalLabel">
                    <i class="fas fa-comments mr-2"></i>
                    <span id="conversation-title">Event Discussion</span>
                </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="sponsor-chat-container">
                    <div class="sponsor-info">
                        <div class="sponsor-avatar">
                            <span id="other-party-initial"></span>
                        </div>
                        <div class="sponsor-details">
                            <h4 id="other-party-name">Loading...</h4>
                            <p id="other-party-role">Loading...</p>
                        </div>
                    </div>

                    <div class="message-thread" id="message-thread">
                        <div class="text-center p-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="sr-only">Loading messages...</span>
                            </div>
                            <p class="mt-2">Loading messages...</p>
                        </div>
                    </div>

                    <form id="message-form" class="message-input">
                        @Html.AntiForgeryToken()
                        <input type="hidden" id="event-id" value="" />
                        <textarea id="message-content" class="form-control" placeholder="Type your message here..." required></textarea>
                        <button type="submit" class="btn btn-primary send-btn" id="send-message-btn">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </form>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <div id="action-buttons">
                    <!-- Dynamic buttons will be placed here -->
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Store modal ID for reference in the page scripts
    window.currentChatModalId = '@randomId';

    document.addEventListener('DOMContentLoaded', function() {
        // Initialize the message form submission
        const messageForm = document.getElementById('message-form');
        if (messageForm) {
            messageForm.addEventListener('submit', function(e) {
                e.preventDefault();

                const eventId = document.getElementById('event-id').value;
                const content = document.getElementById('message-content').value.trim();
                const sendButton = document.getElementById('send-message-btn');

                if (!content) {
                    return;
                }

                // Disable button during sending
                sendButton.disabled = true;
                sendButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';

                // Get CSRF token
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                // Send message via AJAX
                fetch('/Message/SendMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': token
                    },
                    body: new URLSearchParams({
                        eventId: eventId,
                        content: content
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Clear textarea and re-enable button
                    document.getElementById('message-content').value = '';
                    sendButton.disabled = false;
                    sendButton.innerHTML = '<i class="fas fa-paper-plane"></i>';

                    // Add the new message to the thread
                    addMessageToThread(data);

                    // Scroll to bottom
                    scrollToBottom();
                })
                .catch(error => {
                    console.error('Error sending message:', error);
                    sendButton.disabled = false;
                    sendButton.innerHTML = '<i class="fas fa-paper-plane"></i>';
                    alert('Failed to send message. Please try again.');
                });
            });
        }
    });

    // This function will be called from the main page script
    function openChatModal(eventId, eventTitle, otherPartyName, isOrganizer) {
        // Set the event ID
        document.getElementById('event-id').value = eventId;

        // Set the conversation title
        const conversationTitle = document.getElementById('conversation-title');
        conversationTitle.textContent = 'Discussion: ' + eventTitle;

        // Show the modal
        $(`#${window.currentChatModalId}`).modal('show');

        // Load messages
        loadMessages(eventId);

        // Set the action buttons based on whether the user is an organizer or sponsor
        setActionButtons(eventId, isOrganizer);
    }

    function loadMessages(eventId) {
        const messageThread = document.getElementById('message-thread');

        // Show loading state
        messageThread.innerHTML = `
        <div class="text-center p-4">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading messages...</span>
            </div>
            <p class="mt-2">Loading messages...</p>
        </div>`;

        console.log(`Attempting to fetch messages for event ID: ${eventId}`);

        // Fetch messages
        fetch(`/Message/GetMessages?eventId=${eventId}`)
            .then(response => {
                console.log('Response status:', response.status);
                if (!response.ok) {
                    return response.text().then(text => {
                        throw new Error(`Server responded with status ${response.status}: ${text}`);
                    });
                }
                return response.json();
            })
            .then(data => {
                console.log('Received data:', data);

                // Set other party details
                document.getElementById('other-party-name').textContent = data.otherPartyName;
                document.getElementById('other-party-initial').textContent = data.otherPartyInitial;
                document.getElementById('other-party-role').textContent =
                    data.isOrganizer ? 'Sponsor' : 'Event Organizer';

                // Debug message data
                if (data.messages && data.messages.length > 0) {
                    console.log(`Found ${data.messages.length} messages`);
                    data.messages.forEach((msg, index) => {
                        console.log(`Message ${index + 1}: ${msg.content.substring(0, 20)}... | IsFromSponsor: ${msg.isFromSponsor} | SenderId: ${msg.senderId} | RecipientId: ${msg.recipientId}`);
                    });
                } else {
                    console.log('No messages found for this event');
                }

                // Render messages
                renderMessages(data.messages);
            })
            .catch(error => {
                console.error('Error loading messages:', error);
                messageThread.innerHTML = `
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-circle mr-2"></i>
                    Failed to load messages: ${error.message}. Please try refreshing.
                </div>
            `;
            });
    }

    function renderMessages(messages) {
        const messageThread = document.getElementById('message-thread');

        if (!messages || messages.length === 0) {
            messageThread.innerHTML = `
                <div class="text-center p-4">
                    <div class="empty-state-icon small">
                        <i class="far fa-comments"></i>
                    </div>
                    <p class="mt-2">No messages yet. Start the conversation!</p>
                </div>`;
            return;
        }

        // Group messages by date
        const messagesByDate = groupMessagesByDate(messages);

        // Clear message thread
        messageThread.innerHTML = '';

        // Render messages by date
        Object.keys(messagesByDate).forEach(date => {
            // Add date separator
            messageThread.innerHTML += `
                <div class="message-date-separator">
                    <span>${date}</span>
                </div>
            `;

            // Add messages for this date
            messagesByDate[date].forEach(message => {
                const messageElement = createMessageElement(message);
                messageThread.innerHTML += messageElement;
            });
        });

        // Scroll to bottom
        scrollToBottom();
    }

    function groupMessagesByDate(messages) {
        const messagesByDate = {};

        messages.forEach(message => {
            const sentDate = new Date(message.sentAt);
            const dateKey = sentDate.toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });

            if (!messagesByDate[dateKey]) {
                messagesByDate[dateKey] = [];
            }

            messagesByDate[dateKey].push(message);
        });

        return messagesByDate;
    }

    function createMessageElement(message) {
        const time = new Date(message.sentAt).toLocaleTimeString('en-US', {
            hour: 'numeric',
            minute: 'numeric',
            hour12: true
        });

        const messageClass = message.isFromSponsor ? 'sponsor-message' : 'organizer-message';

        return `
        <div class="message ${messageClass}" data-message-id="${message.id}" data-sender-id="${message.senderId}" data-recipient-id="${message.recipientId}">
            <div class="message-content">
                <p>${escapeHtml(message.content).replace(/\\n/g, '<br>')}</p>
                <span class="message-time">${time}</span>
            </div>
        </div>`;
    }

    function addMessageToThread(message) {
        const messageThread = document.getElementById('message-thread');

        // Check if this is the first message
        if (messageThread.querySelector('.empty-state-icon')) {
            // Clear the empty state
            messageThread.innerHTML = '';

            // Add today's date separator
            const today = new Date().toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });

            messageThread.innerHTML += `
                <div class="message-date-separator">
                    <span>${today}</span>
                </div>
            `;
        }

        // Create message element
        const messageElement = createMessageElement(message);

        // Append to thread
        messageThread.innerHTML += messageElement;
    }

    function scrollToBottom() {
        const messageThread = document.getElementById('message-thread');
        messageThread.scrollTop = messageThread.scrollHeight;
    }

    function setActionButtons(eventId, isOrganizer) {
        const actionButtons = document.getElementById('action-buttons');

        if (isOrganizer) {
            // Organizer doesn't have any special actions in the chat modal
            actionButtons.innerHTML = '';
        } else {
            // Sponsor has actions to finalize or cancel
            actionButtons.innerHTML = `
                <form action="/Sponsor/FinalizeSponsorship/${eventId}" method="post" class="d-inline" onsubmit="return confirm('Are you sure you want to finalize sponsorship for this event?')">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-check-circle mr-2"></i>Finalize Sponsorship
                    </button>
                </form>

                <form action="/Sponsor/CancelInterest/${eventId}" method="post" class="d-inline ml-2" onsubmit="return confirm('Are you sure you want to cancel your interest in this event?')">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-outline-danger">
                        <i class="fas fa-times-circle mr-2"></i>Cancel Interest
                    </button>
                </form>
            `;
        }
    }

    // Helper to escape HTML to prevent XSS
    function escapeHtml(unsafe) {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }
</script>