@model IEnumerable<CharityEventOrganizer.Models.Entities.Event>

@{
    ViewData["Title"] = "My Submissions";
}

<div class="row mb-4">
    <div class="col-md-8">
        <h1 class="animate-on-scroll"><i class="fas fa-clipboard-list text-purple-primary mr-3"></i>My Event Submissions</h1>
        <p class="lead text-muted animate-on-scroll">Track and manage your charity event submissions</p>
    </div>
    <div class="col-md-4 text-md-right">
        <a asp-action="Create" class="btn btn-primary animate-on-scroll">
            <i class="fas fa-plus-circle mr-2"></i>Submit New Event
        </a>
    </div>
</div>

@if (Model.Any())
{
    <div class="card animate-on-scroll">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-striped m-0">
                    <thead class="thead-dark">
                        <tr>
                            <th>Title</th>
                            <th>Date</th>
                            <th>Cause</th>
                            <th>Status</th>
                            <th>Submitted</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="cause-icon" style="width: 2rem; height: 2rem; font-size: 1rem;">
                                            <i class="@GetCauseIcon(item.Cause.Name)"></i>
                                        </div>
                                        <div>@item.Title</div>
                                    </div>
                                </td>
                                <td>@item.EventDate.ToShortDateString()</td>
                                <td>@item.Cause.Name</td>
                                <td>
                                    <span class="badge @GetStatusBadgeClass(item.Status)">
                                        @item.Status.ToString()
                                    </span>
                                </td>
                                <td>@item.CreatedDate.ToShortDateString()</td>
                                <td>
                                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info btn-sm">
                                        <i class="fas fa-info-circle mr-1"></i>Details
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-12">
            <div class="card animate-on-scroll">
                <div class="card-header bg-light">
                    <h5 class="mb-0"><i class="fas fa-chart-pie mr-2"></i>Submission Status Overview</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3 col-6 text-center mb-3">
                            <div class="h3 text-secondary">@Model.Count(e => e.Status == CharityEventOrganizer.Models.Entities.EventStatus.Submitted)</div>
                            <div>Submitted</div>
                        </div>
                        <div class="col-md-3 col-6 text-center mb-3">
                            <div class="h3 text-primary">@Model.Count(e => e.Status == CharityEventOrganizer.Models.Entities.EventStatus.UnderReview || e.Status == CharityEventOrganizer.Models.Entities.EventStatus.ApprovedForSponsorship)</div>
                            <div>In Progress</div>
                        </div>
                        <div class="col-md-3 col-6 text-center mb-3">
                            <div class="h3 text-success">@Model.Count(e => e.Status == CharityEventOrganizer.Models.Entities.EventStatus.Approved || e.Status == CharityEventOrganizer.Models.Entities.EventStatus.SponsorshipDiscussion)</div>
                            <div>Approved</div>
                        </div>
                        <div class="col-md-3 col-6 text-center mb-3">
                            <div class="h3 text-danger">@Model.Count(e => e.Status == CharityEventOrganizer.Models.Entities.EventStatus.Rejected)</div>
                            <div>Rejected</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="card animate-on-scroll">
        <div class="card-body text-center py-5">
            <i class="fas fa-clipboard-list text-purple-light" style="font-size: 4rem;"></i>
            <h3 class="mt-4">No Submissions Yet</h3>
            <p class="text-muted">You haven't submitted any charity events yet. Create your first event to get started!</p>
            <a asp-action="Create" class="btn btn-primary mt-3">
                <i class="fas fa-plus-circle mr-2"></i>Submit Your First Event
            </a>
        </div>
    </div>
}

@functions {
    public string GetStatusBadgeClass(CharityEventOrganizer.Models.Entities.EventStatus status)
    {
        return status switch
        {
            CharityEventOrganizer.Models.Entities.EventStatus.Submitted => "badge-secondary",
            CharityEventOrganizer.Models.Entities.EventStatus.UnderReview => "badge-primary",
            CharityEventOrganizer.Models.Entities.EventStatus.ApprovedForSponsorship => "badge-info",
            CharityEventOrganizer.Models.Entities.EventStatus.SponsorshipDiscussion => "badge-warning",
            CharityEventOrganizer.Models.Entities.EventStatus.Approved => "badge-success",
            CharityEventOrganizer.Models.Entities.EventStatus.Rejected => "badge-danger",
            _ => "badge-secondary"
        };
    }

    public string GetCauseIcon(string causeName)
    {
        return causeName.ToLower() switch
        {
            "education" => "fas fa-graduation-cap",
            "healthcare" => "fas fa-heartbeat",
            "environment" => "fas fa-leaf",
            "poverty" => "fas fa-home",
            "animal welfare" => "fas fa-paw",
            "disaster relief" => "fas fa-hands-helping",
            _ => "fas fa-heart"
        };
    }
}