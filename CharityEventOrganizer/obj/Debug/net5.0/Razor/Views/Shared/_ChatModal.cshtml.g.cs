#pragma checksum "C:\Users\User\source\repos\CharityEventOrganizer\CharityEventOrganizer\Views\Shared\_ChatModal.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "98dd7936e363333f06e537d71acfb029b1b99950"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Shared__ChatModal), @"mvc.1.0.view", @"/Views/Shared/_ChatModal.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\User\source\repos\CharityEventOrganizer\CharityEventOrganizer\Views\_ViewImports.cshtml"
using CharityEventOrganizer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\User\source\repos\CharityEventOrganizer\CharityEventOrganizer\Views\_ViewImports.cshtml"
using CharityEventOrganizer.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\User\source\repos\CharityEventOrganizer\CharityEventOrganizer\Views\_ViewImports.cshtml"
using CharityEventOrganizer.Models.Entities;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"98dd7936e363333f06e537d71acfb029b1b99950", @"/Views/Shared/_ChatModal.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2f7d537713725f8f755b0ee5c482a905a7778fe4", @"/Views/_ViewImports.cshtml")]
    public class Views_Shared__ChatModal : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("message-form"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("message-input"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\User\source\repos\CharityEventOrganizer\CharityEventOrganizer\Views\Shared\_ChatModal.cshtml"
  
    var randomId = "sponsorMessagesModal_" + DateTime.Now.Ticks;

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<!-- Sponsor Messages Modal -->\r\n<div class=\"modal fade\"");
            BeginWriteAttribute("id", " id=\"", 131, "\"", 145, 1);
#nullable restore
#line 6 "C:\Users\User\source\repos\CharityEventOrganizer\CharityEventOrganizer\Views\Shared\_ChatModal.cshtml"
WriteAttributeValue("", 136, randomId, 136, 9, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(@" tabindex=""-1"" role=""dialog"" aria-labelledby=""sponsorMessagesModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog modal-lg"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"" id=""sponsorMessagesModalLabel"">
                    <i class=""fas fa-comments mr-2""></i>
                    <span id=""conversation-title"">Event Discussion</span>
                </h5>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
                <div class=""sponsor-chat-container"">
                    <div class=""sponsor-info"">
                        <div class=""sponsor-avatar"">
                            <span id=""other-party-initial""></span>
                        </div>
                        <div class=""sponsor-details"">
                ");
            WriteLiteral(@"            <h4 id=""other-party-name"">Loading...</h4>
                            <p id=""other-party-role"">Loading...</p>
                        </div>
                    </div>

                    <div class=""message-thread"" id=""message-thread"">
                        <div class=""text-center p-4"">
                            <div class=""spinner-border text-primary"" role=""status"">
                                <span class=""sr-only"">Loading messages...</span>
                            </div>
                            <p class=""mt-2"">Loading messages...</p>
                        </div>
                    </div>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "98dd7936e363333f06e537d71acfb029b1b999506714", async() => {
                WriteLiteral("\r\n                        ");
#nullable restore
#line 40 "C:\Users\User\source\repos\CharityEventOrganizer\CharityEventOrganizer\Views\Shared\_ChatModal.cshtml"
                   Write(Html.AntiForgeryToken());

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n                        <input type=\"hidden\" id=\"event-id\"");
                BeginWriteAttribute("value", " value=\"", 1991, "\"", 1999, 0);
                EndWriteAttribute();
                WriteLiteral(@" />
                        <textarea id=""message-content"" class=""form-control"" placeholder=""Type your message here..."" required></textarea>
                        <button type=""submit"" class=""btn btn-primary send-btn"" id=""send-message-btn"">
                            <i class=""fas fa-paper-plane""></i>
                        </button>
                    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </div>
            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Close</button>
                <div id=""action-buttons"">
                    <!-- Dynamic buttons will be placed here -->
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Store modal ID for reference in the page scripts
    window.currentChatModalId = '");
#nullable restore
#line 61 "C:\Users\User\source\repos\CharityEventOrganizer\CharityEventOrganizer\Views\Shared\_ChatModal.cshtml"
                            Write(randomId);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"';

    document.addEventListener('DOMContentLoaded', function() {
        // Initialize the message form submission
        const messageForm = document.getElementById('message-form');
        if (messageForm) {
            messageForm.addEventListener('submit', function(e) {
                e.preventDefault();

                const eventId = document.getElementById('event-id').value;
                const content = document.getElementById('message-content').value.trim();
                const sendButton = document.getElementById('send-message-btn');

                if (!content) {
                    return;
                }

                // Disable button during sending
                sendButton.disabled = true;
                sendButton.innerHTML = '<i class=""fas fa-spinner fa-spin""></i>';

                // Get CSRF token
                const token = document.querySelector('input[name=""__RequestVerificationToken""]').value;

                // Send message via AJAX
     ");
            WriteLiteral(@"           fetch('/Message/SendMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': token
                    },
                    body: new URLSearchParams({
                        eventId: eventId,
                        content: content
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Clear textarea and re-enable button
                    document.getElementById('message-content').value = '';
                    sendButton.disabled = false;
                    sendButton.innerHTML = '<i class=""fas fa-paper-plane""></i>';

                    // Add the");
            WriteLiteral(@" new message to the thread
                    addMessageToThread(data);

                    // Scroll to bottom
                    scrollToBottom();
                })
                .catch(error => {
                    console.error('Error sending message:', error);
                    sendButton.disabled = false;
                    sendButton.innerHTML = '<i class=""fas fa-paper-plane""></i>';
                    alert('Failed to send message. Please try again.');
                });
            });
        }
    });

    // This function will be called from the main page script
    function openChatModal(eventId, eventTitle, otherPartyName, isOrganizer) {
        // Set the event ID
        document.getElementById('event-id').value = eventId;

        // Set the conversation title
        const conversationTitle = document.getElementById('conversation-title');
        conversationTitle.textContent = 'Discussion: ' + eventTitle;

        // Show the modal
        $(`#${window.c");
            WriteLiteral(@"urrentChatModalId}`).modal('show');

        // Load messages
        loadMessages(eventId);

        // Set the action buttons based on whether the user is an organizer or sponsor
        setActionButtons(eventId, isOrganizer);
    }

    function loadMessages(eventId) {
        const messageThread = document.getElementById('message-thread');

        // Show loading state
        messageThread.innerHTML = `
        <div class=""text-center p-4"">
            <div class=""spinner-border text-primary"" role=""status"">
                <span class=""sr-only"">Loading messages...</span>
            </div>
            <p class=""mt-2"">Loading messages...</p>
        </div>`;

        console.log(`Attempting to fetch messages for event ID: ${eventId}`);

        // Fetch messages
        fetch(`/Message/GetMessages?eventId=${eventId}`)
            .then(response => {
                console.log('Response status:', response.status);
                if (!response.ok) {
                    return ");
            WriteLiteral(@"response.text().then(text => {
                        throw new Error(`Server responded with status ${response.status}: ${text}`);
                    });
                }
                return response.json();
            })
            .then(data => {
                console.log('Received data:', data);

                // Set other party details
                document.getElementById('other-party-name').textContent = data.otherPartyName;
                document.getElementById('other-party-initial').textContent = data.otherPartyInitial;
                document.getElementById('other-party-role').textContent =
                    data.isOrganizer ? 'Sponsor' : 'Event Organizer';

                // Debug message data
                if (data.messages && data.messages.length > 0) {
                    console.log(`Found ${data.messages.length} messages`);
                    data.messages.forEach((msg, index) => {
                        console.log(`Message ${index + 1}: ${msg.content");
            WriteLiteral(@".substring(0, 20)}... | IsFromSponsor: ${msg.isFromSponsor} | SenderId: ${msg.senderId} | RecipientId: ${msg.recipientId}`);
                    });
                } else {
                    console.log('No messages found for this event');
                }

                // Render messages
                renderMessages(data.messages);
            })
            .catch(error => {
                console.error('Error loading messages:', error);
                messageThread.innerHTML = `
                <div class=""alert alert-danger"">
                    <i class=""fas fa-exclamation-circle mr-2""></i>
                    Failed to load messages: ${error.message}. Please try refreshing.
                </div>
            `;
            });
    }

    function renderMessages(messages) {
        const messageThread = document.getElementById('message-thread');

        if (!messages || messages.length === 0) {
            messageThread.innerHTML = `
                <div class=""text-c");
            WriteLiteral(@"enter p-4"">
                    <div class=""empty-state-icon small"">
                        <i class=""far fa-comments""></i>
                    </div>
                    <p class=""mt-2"">No messages yet. Start the conversation!</p>
                </div>`;
            return;
        }

        // Group messages by date
        const messagesByDate = groupMessagesByDate(messages);

        // Clear message thread
        messageThread.innerHTML = '';

        // Render messages by date
        Object.keys(messagesByDate).forEach(date => {
            // Add date separator
            messageThread.innerHTML += `
                <div class=""message-date-separator"">
                    <span>${date}</span>
                </div>
            `;

            // Add messages for this date
            messagesByDate[date].forEach(message => {
                const messageElement = createMessageElement(message);
                messageThread.innerHTML += messageElement;
            });
");
            WriteLiteral(@"        });

        // Scroll to bottom
        scrollToBottom();
    }

    function groupMessagesByDate(messages) {
        const messagesByDate = {};

        messages.forEach(message => {
            const sentDate = new Date(message.sentAt);
            const dateKey = sentDate.toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });

            if (!messagesByDate[dateKey]) {
                messagesByDate[dateKey] = [];
            }

            messagesByDate[dateKey].push(message);
        });

        return messagesByDate;
    }

    function createMessageElement(message) {
        const time = new Date(message.sentAt).toLocaleTimeString('en-US', {
            hour: 'numeric',
            minute: 'numeric',
            hour12: true
        });

        const messageClass = message.isFromSponsor ? 'sponsor-message' : 'organizer-message';

      ");
            WriteLiteral(@"  return `
        <div class=""message ${messageClass}"" data-message-id=""${message.id}"" data-sender-id=""${message.senderId}"" data-recipient-id=""${message.recipientId}"">
            <div class=""message-content"">
                <p>${escapeHtml(message.content).replace(/\\n/g, '<br>')}</p>
                <span class=""message-time"">${time}</span>
            </div>
        </div>`;
    }

    function addMessageToThread(message) {
        const messageThread = document.getElementById('message-thread');

        // Check if this is the first message
        if (messageThread.querySelector('.empty-state-icon')) {
            // Clear the empty state
            messageThread.innerHTML = '';

            // Add today's date separator
            const today = new Date().toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });

            messageThread.innerHTML += `
      ");
            WriteLiteral(@"          <div class=""message-date-separator"">
                    <span>${today}</span>
                </div>
            `;
        }

        // Create message element
        const messageElement = createMessageElement(message);

        // Append to thread
        messageThread.innerHTML += messageElement;
    }

    function scrollToBottom() {
        const messageThread = document.getElementById('message-thread');
        messageThread.scrollTop = messageThread.scrollHeight;
    }

    function setActionButtons(eventId, isOrganizer) {
        const actionButtons = document.getElementById('action-buttons');

        if (isOrganizer) {
            // Organizer doesn't have any special actions in the chat modal
            actionButtons.innerHTML = '';
        } else {
            // Sponsor has actions to finalize or cancel
            actionButtons.innerHTML = `
                <form action=""/Sponsor/FinalizeSponsorship/${eventId}"" method=""post"" class=""d-inline"" onsubmit=""ret");
            WriteLiteral("urn confirm(\'Are you sure you want to finalize sponsorship for this event?\')\">\r\n                    ");
#nullable restore
#line 327 "C:\Users\User\source\repos\CharityEventOrganizer\CharityEventOrganizer\Views\Shared\_ChatModal.cshtml"
               Write(Html.AntiForgeryToken());

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
                    <button type=""submit"" class=""btn btn-success"">
                        <i class=""fas fa-check-circle mr-2""></i>Finalize Sponsorship
                    </button>
                </form>

                <form action=""/Sponsor/CancelInterest/${eventId}"" method=""post"" class=""d-inline ml-2"" onsubmit=""return confirm('Are you sure you want to cancel your interest in this event?')"">
                    ");
#nullable restore
#line 334 "C:\Users\User\source\repos\CharityEventOrganizer\CharityEventOrganizer\Views\Shared\_ChatModal.cshtml"
               Write(Html.AntiForgeryToken());

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
                    <button type=""submit"" class=""btn btn-outline-danger"">
                        <i class=""fas fa-times-circle mr-2""></i>Cancel Interest
                    </button>
                </form>
            `;
        }
    }

    // Helper to escape HTML to prevent XSS
    function escapeHtml(unsafe) {
        return unsafe
            .replace(/&/g, ""&amp;"")
            .replace(/</g, ""&lt;"")
            .replace(/>/g, ""&gt;"")
            .replace(/""/g, ""&quot;"")
            .replace(/'/g, ""&#039;"");
    }
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
